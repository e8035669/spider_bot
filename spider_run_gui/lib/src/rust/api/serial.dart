// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.32.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// The type `MockSerialConnection` is not used by any `pub` functions, thus it is ignored.
// The type `UsbSerial` is not used by any `pub` functions, thus it is ignored.

Future<List<String>> listPorts({dynamic hint}) =>
    RustLib.instance.api.listPorts(hint: hint);

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<SerialConnection>>
@sealed
class SerialConnection extends RustOpaque {
  SerialConnection.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  SerialConnection.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_SerialConnection,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_SerialConnection,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_SerialConnectionPtr,
  );

  Future<void> connect(
          {required String deviceName, required bool mock, dynamic hint}) =>
      RustLib.instance.api.serialConnectionConnect(
          that: this, deviceName: deviceName, mock: mock, hint: hint);

  Future<void> disconnect({dynamic hint}) =>
      RustLib.instance.api.serialConnectionDisconnect(that: this, hint: hint);

  Future<SpiderFootStatus> getFootStatus({required int pin, dynamic hint}) =>
      RustLib.instance.api
          .serialConnectionGetFootStatus(that: this, pin: pin, hint: hint);

  Future<SpiderFootSetting> getSetting({required int pin, dynamic hint}) =>
      RustLib.instance.api
          .serialConnectionGetSetting(that: this, pin: pin, hint: hint);

  Future<bool> isConnected({dynamic hint}) =>
      RustLib.instance.api.serialConnectionIsConnected(that: this, hint: hint);

  factory SerialConnection({dynamic hint}) =>
      RustLib.instance.api.serialConnectionNew(hint: hint);

  Future<void> sendWriteCmd(
          {required int pin, required int deg, dynamic hint}) =>
      RustLib.instance.api.serialConnectionSendWriteCmd(
          that: this, pin: pin, deg: deg, hint: hint);

  Future<void> updateSetting(
          {required int pin,
          required double centerDeg,
          required double multiply,
          dynamic hint}) =>
      RustLib.instance.api.serialConnectionUpdateSetting(
          that: this,
          pin: pin,
          centerDeg: centerDeg,
          multiply: multiply,
          hint: hint);
}

class SpiderFootSetting {
  final double centerDeg;
  final double multiply;

  const SpiderFootSetting({
    required this.centerDeg,
    required this.multiply,
  });

  @override
  int get hashCode => centerDeg.hashCode ^ multiply.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is SpiderFootSetting &&
          runtimeType == other.runtimeType &&
          centerDeg == other.centerDeg &&
          multiply == other.multiply;
}

class SpiderFootStatus {
  final bool enabled;
  final int deg;

  const SpiderFootStatus({
    required this.enabled,
    required this.deg,
  });

  @override
  int get hashCode => enabled.hashCode ^ deg.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is SpiderFootStatus &&
          runtimeType == other.runtimeType &&
          enabled == other.enabled &&
          deg == other.deg;
}
